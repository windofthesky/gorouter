// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"code.cloudfoundry.org/gorouter/mbus"
	nats "github.com/nats-io/go-nats"
)

type FakeClient struct {
	SubscribeStub        func(subj string, cb nats.MsgHandler) (*nats.Subscription, error)
	subscribeMutex       sync.RWMutex
	subscribeArgsForCall []struct {
		subj string
		cb   nats.MsgHandler
	}
	subscribeReturns struct {
		result1 *nats.Subscription
		result2 error
	}
	subscribeReturnsOnCall map[int]struct {
		result1 *nats.Subscription
		result2 error
	}
	PublishStub        func(subj string, data []byte) error
	publishMutex       sync.RWMutex
	publishArgsForCall []struct {
		subj string
		data []byte
	}
	publishReturns struct {
		result1 error
	}
	publishReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Subscribe(subj string, cb nats.MsgHandler) (*nats.Subscription, error) {
	fake.subscribeMutex.Lock()
	ret, specificReturn := fake.subscribeReturnsOnCall[len(fake.subscribeArgsForCall)]
	fake.subscribeArgsForCall = append(fake.subscribeArgsForCall, struct {
		subj string
		cb   nats.MsgHandler
	}{subj, cb})
	fake.recordInvocation("Subscribe", []interface{}{subj, cb})
	fake.subscribeMutex.Unlock()
	if fake.SubscribeStub != nil {
		return fake.SubscribeStub(subj, cb)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.subscribeReturns.result1, fake.subscribeReturns.result2
}

func (fake *FakeClient) SubscribeCallCount() int {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return len(fake.subscribeArgsForCall)
}

func (fake *FakeClient) SubscribeArgsForCall(i int) (string, nats.MsgHandler) {
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	return fake.subscribeArgsForCall[i].subj, fake.subscribeArgsForCall[i].cb
}

func (fake *FakeClient) SubscribeReturns(result1 *nats.Subscription, result2 error) {
	fake.SubscribeStub = nil
	fake.subscribeReturns = struct {
		result1 *nats.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) SubscribeReturnsOnCall(i int, result1 *nats.Subscription, result2 error) {
	fake.SubscribeStub = nil
	if fake.subscribeReturnsOnCall == nil {
		fake.subscribeReturnsOnCall = make(map[int]struct {
			result1 *nats.Subscription
			result2 error
		})
	}
	fake.subscribeReturnsOnCall[i] = struct {
		result1 *nats.Subscription
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Publish(subj string, data []byte) error {
	var dataCopy []byte
	if data != nil {
		dataCopy = make([]byte, len(data))
		copy(dataCopy, data)
	}
	fake.publishMutex.Lock()
	ret, specificReturn := fake.publishReturnsOnCall[len(fake.publishArgsForCall)]
	fake.publishArgsForCall = append(fake.publishArgsForCall, struct {
		subj string
		data []byte
	}{subj, dataCopy})
	fake.recordInvocation("Publish", []interface{}{subj, dataCopy})
	fake.publishMutex.Unlock()
	if fake.PublishStub != nil {
		return fake.PublishStub(subj, data)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.publishReturns.result1
}

func (fake *FakeClient) PublishCallCount() int {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return len(fake.publishArgsForCall)
}

func (fake *FakeClient) PublishArgsForCall(i int) (string, []byte) {
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	return fake.publishArgsForCall[i].subj, fake.publishArgsForCall[i].data
}

func (fake *FakeClient) PublishReturns(result1 error) {
	fake.PublishStub = nil
	fake.publishReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PublishReturnsOnCall(i int, result1 error) {
	fake.PublishStub = nil
	if fake.publishReturnsOnCall == nil {
		fake.publishReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.publishReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.subscribeMutex.RLock()
	defer fake.subscribeMutex.RUnlock()
	fake.publishMutex.RLock()
	defer fake.publishMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mbus.Client = new(FakeClient)
